---
import ThemeToggle from "./ThemeToggle.astro";
import { Home } from "@/components/icons";

const navItems = [
  {
    icon: Home,
    label: "home",
    url: "/#home",
  },

  {
    title: "Experience",
    label: "experience",
    url: "/#experience",
  },
  {
    title: "Projects",
    label: "projects",
    url: "/#projects",
  },
  {
    title: "About me",
    label: "about-me",
    url: "/#about-me",
  },
  {
    title: "Contact",
    label: "contact",
    url: "mailto:hello@juan4.dev"
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 justify-center items-center"
  >
    {
      navItems.map((link) => (
        <a
          class="relative block px-2 py-2 transition hover:text-blue-500"
          aria-label={link.label}
          href={link.url}
        >
          {link.title}
          {link.icon && <link.icon />}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            const icon = item.querySelector("svg path");
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
              if (icon) icon.setAttribute("class", "fill-current text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
              if (icon) icon.setAttribute("class", "fill-current text-gray-600 dark:text-white");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  header nav {
    animation: nav-shadow 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
    will-change: background-color, box-shadow, backdrop-filter, border-color;
  }

  @keyframes nav-shadow {
    from {
      background-color: rgba(255, 255, 255, 0);
      box-shadow: 0 0 #0000;
      backdrop-filter: blur(0);
      border-bottom-color: transparent;
    }
    to {
      background-color: rgba(255, 255, 255, 0.6);
      box-shadow:
        0 10px 15px rgba(0, 0, 0, 0.1),
        0 4px 6px rgba(0, 0, 0, 0.05);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
  }

  .dark header nav {
    animation-name: nav-shadow-dark;
  }

  @keyframes nav-shadow-dark {
    from {
      background-color: rgba(31, 41, 55, 0);
      box-shadow: 0 0 #0000;
      backdrop-filter: blur(0);
      border-bottom-color: transparent;
    }
    to {
      background-color: rgba(17, 24, 39, 0.6);
      box-shadow:
        0 10px 15px rgba(0, 0, 0, 0.4),
        0 4px 6px rgba(0, 0, 0, 0.25);
      backdrop-filter: blur(10px);
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
  }
</style>
